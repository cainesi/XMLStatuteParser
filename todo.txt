# X - Rewrite Statute object so that instead of raw data it takes a StatuteIndex instance and the name of a statute to process
# X - Rewrite test.py so that it is based on statute names as specified in stat_config.txt
# X - written, not tested - Code in langutil that relies on Statute's sectionData in order to create applicability object
# X - Write code to store certain information on statue labels into StatuteData Object - have code to copy in the sectionNameDict
# Finish code to add decorators for section references
# Add code to StatuteData object to direct location cites to the correct other statuteData.
# Add code to stat_config.txt to determine which statutes are parsed or ignored
# Code in StatuteIndex to convert series of Fragments into references (if references can be found).
# Code to add decorators for other section references
# Code to add decorators for defined terms
# Confirm that page output working correctly
# Code to allow one Decorator to override overlapping decorators when added (for example, if the existing decorator doesn't have a pinpoint object)

# Code for tables of contents for each instrument
# Code to add disclaimer footer on each page
# Code to add decorators for historical notes (should be able to lift this from prior project)
# Code to add tables of referencing sections / regulations (have the decorators store the target sectionLabel/instrument as well as the page/anchor, so that we can walk the decorators and find cross-refernces; or have the StatuteIndex keep track of the cross-links as they are querried?).
